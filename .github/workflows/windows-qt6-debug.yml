---
name: 🪟 Windows MinGW Debug Build (Minimal)
on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: build (mingw-debug)
    runs-on: windows-latest

    steps:
      - name: 🐣 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔨 Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-proj
            mingw-w64-x86_64-gdal
            mingw-w64-x86_64-geos
            mingw-w64-x86_64-sqlite3
            mingw-w64-x86_64-python
            mingw-w64-x86_64-ccache
            flex
            bison

      - name: 🔍 Check available packages
        shell: msys2 {0}
        run: |
          echo "Searching for flex and bison packages..."
          pacman -Ss flex
          pacman -Ss bison
          
          echo "Checking PROJ is functional..."
          pkg-config --modversion proj
          
          echo "Current directory contents:"
          ls -la

      - name: 🌱 Configure QGIS Build
        shell: msys2 {0}
        run: |
          # Create build directory
          mkdir -p build
          cd build
          
          # Configure with CMake for Debug build - minimal config
          cmake .. -G Ninja \
                -D CMAKE_BUILD_TYPE=Debug \
                -D WITH_DESKTOP=ON \
                -D WITH_3D=OFF \
                -D WITH_BINDINGS=OFF \
                -D ENABLE_TESTS=OFF \
                -D BUILD_WITH_QT6=ON \
                -D ENABLE_UNITY_BUILDS=OFF \
                -D WITH_GRASS=OFF \
                -D WITH_CUSTOM_WIDGETS=OFF \
                -D WITH_SERVER=OFF

      - name: 📑 Upload CMake logs (if failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cmake-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log

      - name: 🌋 Build QGIS
        shell: msys2 {0}
        run: |
          cd build
          cmake --build . --config Debug

      - name: 📦 Create Debug SDK
        shell: msys2 {0}
        run: |
          # Create SDK directory structure
          mkdir -p sdk/qgis-sdk-debug/bin
          mkdir -p sdk/qgis-sdk-debug/lib
          mkdir -p sdk/qgis-sdk-debug/include
          
          # Copy libraries from MSYS2
          echo "Copying PROJ libraries..."
          cp -v /mingw64/bin/libproj-*.dll sdk/qgis-sdk-debug/bin/
          cp -v /mingw64/lib/libproj.dll.a sdk/qgis-sdk-debug/lib/
          
          echo "Copying GDAL libraries..."
          cp -v /mingw64/bin/libgdal-*.dll sdk/qgis-sdk-debug/bin/
          cp -v /mingw64/lib/libgdal.dll.a sdk/qgis-sdk-debug/lib/
          
          # Copy built QGIS libraries if available
          if [ -d "build/output/bin" ]; then
            echo "Copying QGIS binaries..."
            cp -v build/output/bin/* sdk/qgis-sdk-debug/bin/ || echo "No binaries found"
          fi
          
          if [ -d "build/output/lib" ]; then
            echo "Copying QGIS libraries..."
            cp -v build/output/lib/* sdk/qgis-sdk-debug/lib/ || echo "No libraries found"
          fi
          
          # Create README
          cat > sdk/qgis-sdk-debug/README.md << EOF
          # QGIS Debug SDK
          
          This SDK contains debug builds of QGIS libraries and dependencies.
          Built using GitHub Actions with MinGW.
          
          Created: $(date +%Y-%m-%d)
          EOF
          
          # Create ZIP file
          cd sdk
          zip -r ../qgis-sdk-mingw-debug.zip qgis-sdk-debug

      - name: 📤 Upload debug SDK
        uses: actions/upload-artifact@v4
        with:
          name: qgis-sdk-mingw-debug
          path: |
            qgis-sdk-mingw-debug.zip
