---
name: ü™ü Windows Qt6 Debug Build (Fixed)
on:
  workflow_dispatch:  # Allow manual triggering

permissions:
  packages: write

jobs:
  build:
    name: build (windows debug)
    runs-on: windows-2022

    steps:
      - name: üê£ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üî® Install build tools
        shell: pwsh
        run: |
          choco install ninja cmake -y
          refreshenv
          ninja --version
          cmake --version

      - name: üßΩ Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1

      - name: ü¶¨ Setup flex/bison
        uses: robinraju/release-downloader@v1.12
        with:
          repository: 'lexxmark/winflexbison'
          fileName: '*.zip'
          tag: 'v2.5.24'
          extract: true

      - name: üìù Fix Expat and Configure Debug Triplet
        shell: pwsh
        run: |
          # Create a pre-built expat library to avoid the vcpkg build issue
          mkdir -p vcpkg/packages/expat_x64-windows/include -ErrorAction SilentlyContinue
          
          # Create empty expat_external.h file that's causing the issue
          Set-Content -Path vcpkg/packages/expat_x64-windows/include/expat_external.h -Value @"
          /* Workaround for vcpkg build issue */
          #ifndef EXPAT_EXTERNAL_H
          #define EXPAT_EXTERNAL_H
          #define XML_STATIC
          #endif
          "@
          
          # Create or update the debug triplet file
          if (-not (Test-Path "vcpkg/triplets")) {
            Write-Host "Creating triplets directory"
            mkdir -p vcpkg/triplets -ErrorAction SilentlyContinue
          }
          
          Set-Content -Path vcpkg/triplets/x64-windows.cmake -Value @"
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE dynamic)
          set(VCPKG_BUILD_TYPE debug)
          "@
          
          Write-Host "Debug triplet file created/updated:"
          Get-Content -Path vcpkg/triplets/x64-windows.cmake

      - name: üå± Configure QGIS Build
        shell: pwsh
        run: |
          # Set build environment variables
          $env:VCPKG_FEATURE_FLAGS = "-binarycaching"  # Disable binary caching
          $env:VCPKG_MAX_CONCURRENCY = "1"  # Limit concurrency
          
          # Check directories before build
          Write-Host "Content of vcpkg directory:"
          Get-ChildItem -Path vcpkg -Depth 1
          
          Write-Host "Content of vcpkg/triplets directory:"
          Get-ChildItem -Path vcpkg/triplets
          
          # Configure with CMake - minimal configuration with internal libraries
          New-Item -ItemType Directory -Path build -Force
          cd build
          
          Write-Host "Running CMake configuration..."
          cmake .. -G Ninja `
                -D CMAKE_BUILD_TYPE=Debug `
                -D WITH_VCPKG=OFF `
                -D WITH_DESKTOP=ON `
                -D WITH_3D=OFF `
                -D WITH_BINDINGS=OFF `
                -D ENABLE_TESTS=OFF `
                -D BUILD_WITH_QT6=ON `
                -D ENABLE_UNITY_BUILDS=OFF `
                -D FLEX_EXECUTABLE="../win_flex.exe" `
                -D BISON_EXECUTABLE="../win_bison.exe" `
                -D WITH_QTWEBKIT=OFF `
                -D WITH_INTERNAL_SPATIALITE=ON `
                -D WITH_INTERNAL_SQLITE3=ON `
                -D WITH_INTERNAL_EXPAT=ON `
                -D WITH_GRASS=OFF `
                -D WITH_CUSTOM_WIDGETS=OFF

      - name: üìë Upload CMake logs (after failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cmake-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/CMakeCache.txt

      - name: üåã Build QGIS
        shell: pwsh
        run: |
          cd build
          cmake --build . --config Debug

      - name: üì¶ Package QGIS
        shell: pwsh
        run: |
          cd build
          cmake --build . --target bundle --config Debug

      - name: üì¶ Create Debug SDK
        shell: pwsh
        run: |
          # Create SDK directory structure
          $sdkDir = "sdk/qgis-sdk-debug"
          New-Item -ItemType Directory -Path $sdkDir/bin,$sdkDir/lib,$sdkDir/include,$sdkDir/share -Force
          
          # Copy debug libraries and binaries
          if (Test-Path "build/output/bin/Debug") {
            Copy-Item -Path "build/output/bin/Debug/*" -Destination "$sdkDir/bin" -Recurse -Force
            Write-Host "Copied debug binaries"
          } else {
            Write-Host "Debug binaries not found at build/output/bin/Debug"
            Get-ChildItem -Path build/output -Recurse -Depth 2
          }
          
          if (Test-Path "build/output/lib") {
            Copy-Item -Path "build/output/lib/*" -Destination "$sdkDir/lib" -Recurse -Force
            Write-Host "Copied libraries"
          } else {
            Write-Host "Libraries not found at build/output/lib"
          }
          
          # Add README
          Set-Content -Path "$sdkDir/README.md" -Value @"
          # QGIS Debug SDK
          
          This SDK contains debug builds of QGIS libraries and dependencies.
          Built using GitHub Actions with internal libraries.
          
          Created: $(Get-Date -Format "yyyy-MM-dd")
          "@ 
          
          # Create ZIP file
          Compress-Archive -Path "$sdkDir/*" -DestinationPath qgis-sdk-x64-windows-debug.zip -Force

      - name: üì§ Upload debug SDK
        uses: actions/upload-artifact@v4
        with:
          name: qgis-sdk-x64-windows-debug
          path: |
            qgis-sdk-x64-windows-debug.zip

      - name: üì§ Upload debug bundle
        uses: actions/upload-artifact@v4
        id: artifact-win64-qt6-debug
        with:
          name: qgis-windows-qt6-debug
          path: |
            build/*-win64.zip
