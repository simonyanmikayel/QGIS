---
name: 🪟 Windows Qt6 Debug Build (OSGeo4W-based)
on:
  workflow_dispatch:  # Allow manual triggering

permissions:
  packages: write

jobs:
  build:
    name: build (windows debug)
    runs-on: windows-2022

    steps:
      - name: 🐣 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔨 Install build tools
        shell: pwsh
        run: |
          choco install ninja cmake curl -y
          refreshenv
          ninja --version
          cmake --version

      - name: 🧽 Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1

      - name: 📥 Download OSGeo4W Dependencies
        shell: pwsh
        run: |
          mkdir -p osgeo4w_deps
          
          # Download OSGeo4W installer
          curl -L -o osgeo4w-setup.exe https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe
          
          # Run OSGeo4W installer with command-line arguments
          ./osgeo4w-setup.exe --quiet-mode --root=D:/a/QGIS/QGIS/osgeo4w_deps --advanced --no-desktop --no-shortcuts --no-startmenu --packages=msys,flex,bison,qt6-devel,gdal-devel,proj-devel,geos-devel,sqlite3-devel
          
          # Verify installations
          Get-ChildItem -Path osgeo4w_deps/bin -Filter "proj*.dll"
          Get-ChildItem -Path osgeo4w_deps/lib -Filter "proj*.lib"
          Get-ChildItem -Path osgeo4w_deps/include/proj*

      - name: 🦬 Setup flex/bison
        uses: robinraju/release-downloader@v1.12
        with:
          repository: 'lexxmark/winflexbison'
          fileName: '*.zip'
          tag: 'v2.5.24'
          extract: true

      - name: 🌱 Configure QGIS Build
        shell: cmd
        run: |
          mkdir build
          cd build
          
          REM Create osgeo4w environment setup
          echo set OSGEO4W_ROOT=D:\a\QGIS\QGIS\osgeo4w_deps > osgeo4w_env.bat
          echo set PATH=D:\a\QGIS\QGIS\osgeo4w_deps\bin;%%PATH%% >> osgeo4w_env.bat
          echo set PROJ_LIB=D:\a\QGIS\QGIS\osgeo4w_deps\share\proj >> osgeo4w_env.bat
          echo set INCLUDE=D:\a\QGIS\QGIS\osgeo4w_deps\include;%%INCLUDE%% >> osgeo4w_env.bat
          echo set LIB=D:\a\QGIS\QGIS\osgeo4w_deps\lib;%%LIB%% >> osgeo4w_env.bat
          
          REM Source our custom environment
          CALL osgeo4w_env.bat
          
          REM Manually create proj version file in case it's missing
          mkdir -p D:\a\QGIS\QGIS\osgeo4w_deps\include\proj
          echo #define PROJ_VERSION_MAJOR 9 > D:\a\QGIS\QGIS\osgeo4w_deps\include\proj\proj_config.h
          echo #define PROJ_VERSION_MINOR 0 >> D:\a\QGIS\QGIS\osgeo4w_deps\include\proj\proj_config.h
          echo #define PROJ_VERSION_PATCH 0 >> D:\a\QGIS\QGIS\osgeo4w_deps\include\proj\proj_config.h
          
          REM Configure with CMake
          cmake .. -G Ninja ^
                -D CMAKE_BUILD_TYPE=Debug ^
                -D WITH_DESKTOP=ON ^
                -D WITH_3D=OFF ^
                -D WITH_BINDINGS=OFF ^
                -D ENABLE_TESTS=OFF ^
                -D BUILD_WITH_QT6=ON ^
                -D ENABLE_UNITY_BUILDS=OFF ^
                -D FLEX_EXECUTABLE="../win_flex.exe" ^
                -D BISON_EXECUTABLE="../win_bison.exe" ^
                -D WITH_QTWEBKIT=OFF ^
                -D OSGEO4W_ROOT="D:/a/QGIS/QGIS/osgeo4w_deps" ^
                -D WITH_INTERNAL_SPATIALITE=ON ^
                -D Proj_DIR=D:/a/QGIS/QGIS/osgeo4w_deps/lib/cmake/proj ^
                -D CMAKE_PREFIX_PATH=D:/a/QGIS/QGIS/osgeo4w_deps ^
                -D CMAKE_FIND_ROOT_PATH=D:/a/QGIS/QGIS/osgeo4w_deps

      - name: 📑 Upload CMake logs (after failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cmake-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeCache.txt

      - name: 🌋 Build QGIS
        shell: cmd
        run: |
          cd build
          CALL osgeo4w_env.bat
          cmake --build . --config Debug

      - name: 📦 Package QGIS
        shell: cmd
        run: |
          cd build
          CALL osgeo4w_env.bat
          cmake --build . --target bundle --config Debug

      - name: 📦 Create Debug SDK
        shell: pwsh
        run: |
          # Create SDK directory structure
          $sdkDir = "sdk/qgis-sdk-debug"
          mkdir -p $sdkDir/bin,$sdkDir/lib,$sdkDir/include,$sdkDir/share
          
          # Copy debug libraries and binaries
          if (Test-Path "build/output/bin/Debug") {
            Copy-Item "build/output/bin/Debug/*" -Destination "$sdkDir/bin" -Recurse
          }
          
          if (Test-Path "build/output/lib") {
            Copy-Item "build/output/lib/*" -Destination "$sdkDir/lib" -Recurse
          }
          
          # Copy OSGeo4W debug libraries
          Copy-Item "osgeo4w_deps/bin/*.dll" -Destination "$sdkDir/bin" -Recurse
          Copy-Item "osgeo4w_deps/lib/*.lib" -Destination "$sdkDir/lib" -Recurse
          
          # Add README
          Set-Content -Path "$sdkDir/README.md" -Value @"
          # QGIS Debug SDK
          
          This SDK contains debug builds of QGIS libraries and dependencies.
          Built using GitHub Actions with OSGeo4W dependencies.
          
          Created: $(Get-Date -Format "yyyy-MM-dd")
          "@ 
          
          # Create ZIP file
          Compress-Archive -Path sdk/qgis-sdk-debug/* -DestinationPath qgis-sdk-x64-windows-debug.zip

      - name: 📤 Upload debug SDK
        uses: actions/upload-artifact@v4
        with:
          name: qgis-sdk-x64-windows-debug
          path: |
            qgis-sdk-x64-windows-debug.zip

      - name: 📑 Upload debug bundle
        uses: actions/upload-artifact@v4
        id: artifact-win64-qt6-debug
        with:
          name: qgis-windows-qt6-debug
          path: |
            build/*-win64.zip
